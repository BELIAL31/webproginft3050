// <auto-generated />
using System;
using EPC.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EPC.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EPC.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("EPC.Models.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("EPC.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2025, 6, 27, 1, 4, 34, 184, DateTimeKind.Local).AddTicks(4919),
                            Description = "CPUs and processors for high-performance computing",
                            Name = "Processors"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2025, 6, 27, 1, 4, 34, 186, DateTimeKind.Local).AddTicks(2725),
                            Description = "GPUs and video cards for gaming and professional work",
                            Name = "Graphics Cards"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2025, 6, 27, 1, 4, 34, 186, DateTimeKind.Local).AddTicks(2743),
                            Description = "RAM and memory modules for system performance",
                            Name = "Memory"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2025, 6, 27, 1, 4, 34, 186, DateTimeKind.Local).AddTicks(2745),
                            Description = "SSDs, HDDs, and storage devices for data storage",
                            Name = "Storage"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2025, 6, 27, 1, 4, 34, 186, DateTimeKind.Local).AddTicks(2747),
                            Description = "Motherboards and chipsets for system foundation",
                            Name = "Motherboards"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2025, 6, 27, 1, 4, 34, 186, DateTimeKind.Local).AddTicks(2749),
                            Description = "PSUs and power supplies for stable power delivery",
                            Name = "Power Supplies"
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2025, 6, 27, 1, 4, 34, 186, DateTimeKind.Local).AddTicks(2750),
                            Description = "PC cases and enclosures for system protection",
                            Name = "Cases"
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2025, 6, 27, 1, 4, 34, 186, DateTimeKind.Local).AddTicks(2752),
                            Description = "Fans, coolers, and thermal solutions for temperature management",
                            Name = "Cooling"
                        });
                });

            modelBuilder.Entity("EPC.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("AverageRating")
                        .HasColumnType("float");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ReviewCount")
                        .HasColumnType("int");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AverageRating = 4.7999999999999998,
                            CategoryId = 1,
                            CreatedDate = new DateTime(2025, 6, 27, 1, 4, 34, 187, DateTimeKind.Local).AddTicks(7817),
                            Description = "16-Core, 32-Thread Unlocked Desktop Processor",
                            ImageUrl = "/images/products/ryzen-9-7950x.jpg",
                            IsActive = true,
                            Name = "AMD Ryzen 9 7950X",
                            Price = 699.99m,
                            ReviewCount = 245,
                            StockQuantity = 50
                        },
                        new
                        {
                            Id = 2,
                            AverageRating = 4.9000000000000004,
                            CategoryId = 2,
                            CreatedDate = new DateTime(2025, 6, 27, 1, 4, 34, 188, DateTimeKind.Local).AddTicks(2464),
                            Description = "24GB GDDR6X Graphics Card",
                            ImageUrl = "/images/products/rtx-4090.jpg",
                            IsActive = true,
                            Name = "NVIDIA GeForce RTX 4090",
                            Price = 1599.99m,
                            ReviewCount = 189,
                            StockQuantity = 25
                        },
                        new
                        {
                            Id = 3,
                            AverageRating = 4.7000000000000002,
                            CategoryId = 3,
                            CreatedDate = new DateTime(2025, 6, 27, 1, 4, 34, 188, DateTimeKind.Local).AddTicks(2478),
                            Description = "32GB (2x16GB) DDR5-5600 C36 Memory Kit",
                            ImageUrl = "/images/products/corsair-vengeance-ddr5.jpg",
                            IsActive = true,
                            Name = "Corsair Vengeance DDR5",
                            Price = 299.99m,
                            ReviewCount = 156,
                            StockQuantity = 75
                        },
                        new
                        {
                            Id = 4,
                            AverageRating = 4.5999999999999996,
                            CategoryId = 4,
                            CreatedDate = new DateTime(2025, 6, 27, 1, 4, 34, 188, DateTimeKind.Local).AddTicks(2483),
                            Description = "2TB NVMe M.2 Internal SSD",
                            ImageUrl = "/images/products/samsung-980-pro.jpg",
                            IsActive = true,
                            Name = "Samsung 980 PRO SSD",
                            Price = 199.99m,
                            ReviewCount = 312,
                            StockQuantity = 100
                        },
                        new
                        {
                            Id = 5,
                            AverageRating = 4.5,
                            CategoryId = 5,
                            CreatedDate = new DateTime(2025, 6, 27, 1, 4, 34, 188, DateTimeKind.Local).AddTicks(2487),
                            Description = "AM5 ATX Gaming Motherboard",
                            ImageUrl = "/images/products/asus-rog-strix-x670e.jpg",
                            IsActive = true,
                            Name = "ASUS ROG STRIX X670E-E",
                            Price = 449.99m,
                            ReviewCount = 89,
                            StockQuantity = 30
                        },
                        new
                        {
                            Id = 6,
                            AverageRating = 4.7999999999999998,
                            CategoryId = 6,
                            CreatedDate = new DateTime(2025, 6, 27, 1, 4, 34, 188, DateTimeKind.Local).AddTicks(2490),
                            Description = "850W 80+ Gold Certified PSU",
                            ImageUrl = "/images/products/corsair-rm850x.jpg",
                            IsActive = true,
                            Name = "Corsair RM850x",
                            Price = 139.99m,
                            ReviewCount = 203,
                            StockQuantity = 60
                        },
                        new
                        {
                            Id = 7,
                            AverageRating = 4.4000000000000004,
                            CategoryId = 7,
                            CreatedDate = new DateTime(2025, 6, 27, 1, 4, 34, 188, DateTimeKind.Local).AddTicks(2493),
                            Description = "Mid-Tower ATX PC Case",
                            ImageUrl = "/images/products/nzxt-h7-flow.jpg",
                            IsActive = true,
                            Name = "NZXT H7 Flow",
                            Price = 129.99m,
                            ReviewCount = 167,
                            StockQuantity = 40
                        },
                        new
                        {
                            Id = 8,
                            AverageRating = 4.9000000000000004,
                            CategoryId = 8,
                            CreatedDate = new DateTime(2025, 6, 27, 1, 4, 34, 188, DateTimeKind.Local).AddTicks(2496),
                            Description = "Premium CPU Cooler",
                            ImageUrl = "/images/products/noctua-nh-d15.jpg",
                            IsActive = true,
                            Name = "Noctua NH-D15",
                            Price = 99.99m,
                            ReviewCount = 278,
                            StockQuantity = 80
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EPC.Models.CartItem", b =>
                {
                    b.HasOne("EPC.Models.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EPC.Models.ApplicationUser", "User")
                        .WithMany("CartItems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EPC.Models.Product", b =>
                {
                    b.HasOne("EPC.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EPC.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EPC.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EPC.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EPC.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EPC.Models.ApplicationUser", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("EPC.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("EPC.Models.Product", b =>
                {
                    b.Navigation("CartItems");
                });
#pragma warning restore 612, 618
        }
    }
}
